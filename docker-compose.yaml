version: '3.8'
services:
  kachalka-backend-1:
    container_name: kachalka-backend-1
    environment:
      - SPRING_PROFILES_ACTIVE=prod,cron
    image: openjdk:17-ea-16-jdk
    volumes:
      - ./kachalka-backend/build/libs/kachalka-backend-0.0.1-SNAPSHOT.jar:/kachalka-backend.jar
    command: [ "java", "-jar", "kachalka-backend.jar"]
    ports:
      - "666:8080"
    networks:
      - kachalka-network
    depends_on:
      - kachalka-postgresql
      - kafka
      - keycloak

  kachalka-backend-2:
    container_name: kachalka-backend-2
    environment:
      - SPRING_PROFILES_ACTIVE=prod
    image: openjdk:17-ea-16-jdk
    volumes:
      - ./kachalka-backend/build/libs/kachalka-backend-0.0.1-SNAPSHOT.jar:/kachalka-backend.jar
    command: [ "java", "-jar", "kachalka-backend.jar" ]
    ports:
      - "777:8080"
    networks:
      - kachalka-network
    depends_on:
      - kachalka-postgresql
      - kafka
      - keycloak

  balancer:
    image: nginx
    volumes:
      - type: bind
        source: ./nginx/nginx.conf
        target: /etc/nginx/conf.d/default.conf
        read_only: true
    ports:
      - "80:80"
    depends_on:
      - kachalka-backend-1
      - kachalka-backend-2
    networks:
      - kachalka-network

  sper-bank:
    container_name: sper-bank
    environment:
      - SPRING_PROFILES_ACTIVE=prod
    image: openjdk:17-ea-16-jdk
    volumes:
      - ./sper-bank/build/libs/sper-bank-0.0.1-SNAPSHOT.jar:/sper-bank.jar
    command: [ "java", "-jar", "sper-bank.jar"]
    networks:
      - kachalka-network
    depends_on:
      - balancer
      - sper-bank-postgresql

  kachalka-postgresql:
    image: postgres:16
    environment:
      - POSTGRES_USER=kachalka
      - POSTGRES_DB=kachalka
      - POSTGRES_PASSWORD=kachalka
    volumes:
      - ./kachalka-backend/src/main/resources/sql:/docker-entrypoint-initdb.d
    ports:
      - "5433:5432"
    networks:
      - kachalka-network

  sper-bank-postgresql:
    image: postgres:16
    environment:
      - POSTGRES_USER=sper-bank
      - POSTGRES_DB=sper-bank
      - POSTGRES_PASSWORD=sper-bank
    volumes:
      - ./sper-bank/src/main/resources/sql:/docker-entrypoint-initdb.d
    ports:
      - "667:5432"
    networks:
      - kachalka-network

  keycloak-postgresql:
    image: postgres:16
    environment:
      - POSTGRES_USER=keycloak
      - POSTGRES_DB=keycloak
      - POSTGRES_PASSWORD=SUPERsecret
    volumes:
      - '/Users/s.lazeev/Documents/study/postgresql_docker:/var/lib/postgresql/data'
    networks:
      - kachalka-network
    expose:
      - 5432
    hostname: "postgres"

  keycloak:
    image: quay.io/keycloak/keycloak:22.0.3
    restart: always
    command: start-dev
    depends_on:
      - keycloak-postgresql
    environment:
      - KC_PROXY_ADDRESS_FORWARDING=true
      - KC_HOSTNAME_STRICT=false
      - KC_PROXY=edge
      - KC_HTTP_ENABLED=true
      - KC_DB=postgres
      - KC_HOSTNAME_URL=http://keycloak:8080
      - KC_DB_USERNAME=keycloak
      - KC_DB_PASSWORD=SUPERsecret
      - KC_DB_URL_HOST=postgres
      - KC_DB_URL_PORT=5432
      - KC_DB_URL_DATABASE=keycloak
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=password
    networks:
      - kachalka-network
    ports:
      - "1337:8080"

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "22181:2181"
    networks:
      - kachalka-network

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
    hostname: kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
#      , PLAINTEXT_HOST://localhost:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - kachalka-network
#    command:
#      "
#        kafka-topics --bootstrap-server localhost:9092 --create --if-not-exists --topic my-topic-1 --replication-factor 1 --partitions 1
#      "

#  init-kafka:
#    image: confluentinc/cp-kafka:latest
#    depends_on:
#      - kafka
#    entrypoint: ['/bin/sh', '-c']
#    command:
#      "
#        # blocks until kafka is reachable
#        kafka-topics --bootstrap-server kafka:29093 --list
#
#        echo -e 'Creating kafka topics'
#        kafka-topics --bootstrap-server kafka:29093 --create --if-not-exists --topic my-topic-1 --replication-factor 1 --partitions 1
#        kafka-topics --bootstrap-server kafka:29093 --create --if-not-exists --topic my-topic-2 --replication-factor 1 --partitions 1
#
#        echo -e 'Successfully created the following topics:'
#        kafka-topics --bootstrap-server kafka:29093 --list
#      "
#    networks:
#      - kachalka-network

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - "8090:8080"
    restart: always
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:29093
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    links:
      - kafka
      - zookeeper
    networks:
      - kachalka-network

  grafana:
    build: './config/grafana'
    ports:
      - 3001:3000
    volumes:
      - ./grafana:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    networks:
      - kachalka-network

  prometheus:
    image: prom/prometheus
    ports:
      - 9091:9090
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus:/prometheus
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - kachalka-network

networks:
  kachalka-network:
    name: kachalka-network
    driver: bridge